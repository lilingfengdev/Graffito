# Graffito 示例配置文件

# 复制此文件为 config.yaml 并根据实际情况修改



# 系统配置

system:

  debug: false

  log_level: INFO
  # 除非你知道你在做什么,否则千万不要改,因为压根没做兼容
  data_dir: ./data

  cache_dir: ./data/cache



# 服务器配置  

server:

  host: "0.0.0.0"

  port: 8082

  workers: 4



# Web 后端配置

web:

  enabled: true

  host: "0.0.0.0"

  port: 8083

  # 前端来源（可选）：设置为前端站点的完整 Origin（含协议与端口），例如 "http://localhost:5173"
  frontend_origin: ""

  # 身份认证（JWT），用于前端登录会话
  jwt_secret_key: "change-this-secret"

  jwt_algorithm: "HS256"

  access_token_expires_minutes: 720

  # CORS 跨域设置（如前端域名固定，建议仅设置 frontend_origin）
  cors_allow_origins: [ "*" ]

  cors_allow_credentials: true

  cors_allow_methods: [ "*" ]

  cors_allow_headers: [ "*" ]

  # API 限流（SlowAPI）配置
  # 说明：
  # - enabled: 是否启用限流
  # - default: 应用于所有未单独设置的接口的默认限额（可选）
  # - login/register/create_invite/init_superadmin: 针对特定接口的限额（可选）
  # - storage_uri: 可选的共享存储（如 Redis）用于多实例/分布式限流
  # - trust_forwarded_for: 位于反向代理后时，信任 X-Forwarded-For 头
  rate_limit:
    enabled: false
    default: "120/minute"
    login: "10/minute"
    register_invite: "5/hour"
    create_invite: "20/hour"
    init_superadmin: "2/hour"
    # storage_uri: "redis://localhost:6379/0"  # 分布式部署建议启用
    trust_forwarded_for: true



# 数据库配置

database:

  type: sqlite

  url: sqlite+aiosqlite:///./data/graffito.db

  pool_size: 10



# 缓存配置（基于 aiocache，支持多种后端）
# 参考文档: http://aiocache.readthedocs.io/
# 
# 功能：
# - 消息缓存：将 MessageCache 从数据库迁移到缓存，提升性能（自动降级）
# - 任务队列：支持 RedisQueue 后端（需在 queue.backend 中配置）
# - 分布式锁：提供跨实例的分布式锁支持
# - API 限流：可通过 web.rate_limit.storage_uri 使用 Redis 实现分布式限流
#
# 后端选择：
# - memory: 本地内存缓存（适合单机/开发/测试，无需外部服务）
# - redis: Redis 缓存（适合生产/分布式部署，高性能）
# - memcached: Memcached 缓存（高性能缓存服务器）

cache:

  # 缓存后端类型: memory | redis | memcached
  backend: "memory"
  
  # 序列化器: null | string | json | pickle | msgpack
  # - null: 无序列化（仅内存后端，最快）
  # - string: 字符串序列化（简单数据）
  # - json: JSON 序列化（推荐，跨语言兼容）
  # - pickle: Python Pickle（Python 对象）
  # - msgpack: MessagePack（高效二进制）
  serializer: "json"
  
  # 命名空间（键前缀，用于多项目隔离）
  namespace: "graffito"
  
  # 默认 TTL（秒，缓存过期时间）
  ttl: 300
  
  # 操作超时（秒）
  timeout: 5
  
  # ==================== Redis 配置 ====================
  # 仅当 backend="redis" 时生效
  redis_endpoint: "127.0.0.1"
  redis_port: 6379
  redis_db: 0
  redis_password: null  # Redis 密码（null 表示无密码）
  redis_pool_size: 50   # 连接池大小
  
  # ==================== Memcached 配置 ====================
  # 仅当 backend="memcached" 时生效
  memcached_endpoint: "127.0.0.1"
  memcached_port: 11211
  memcached_pool_size: 2
  
  # ==================== 业务配置 ====================
  message_cache_ttl: 7200  # 消息缓存过期时间（秒），默认 2 小时
  lock_timeout: 30         # 分布式锁超时时间（秒）
  lock_sleep: 0.1          # 锁获取重试间隔（秒）



# LLM配置

llm:
  # OpenAI API 基础地址：
  # - 官方服务: https://api.openai.com/v1
  # - 兼容代理/自建服务: 填写对应的 base_url
  base_url: https://api.openai.com/v1

  api_key: sk-your-api-key-here  # 替换为实际的API密钥，或使用 ${OPENAI_API_KEY}

  text_model: gpt-4o-mini

  vision_model: gpt-4o-mini

  timeout: 30

  max_retry: 3



# 处理配置

processing:

  wait_time: 120  # 等待用户补充消息的时间（秒）

  max_concurrent: 10  # 最大并发处理数



# 渲染配置

rendering:

  # 自定义字体族，支持多个字体回退
  # 示例：中文字体优先
  # font_family: "'思源黑体', 'Source Han Sans', 'PingFang SC', 'Microsoft YaHei', sans-serif"
  # 示例：西文字体优先  
  # font_family: "'Inter', 'Roboto', 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', sans-serif"
  font_family: "'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif"

  # 渲染后端类型
  # - local: 本地 Playwright 渲染（默认，需要安装 playwright）
  # - remote: 独立渲染服务（需要启动 render_service/server.py）
  # - cloudflare: Cloudflare Browser Rendering（云端渲染，需要 Cloudflare 账号）
  backend: local

  # 渲染后端配置
  backend_config:
    # Remote 渲染服务配置（当 backend=remote 时生效）
    service_url: "http://localhost:8084"
    # token: "your_render_service_token"  # 可选，渲染服务的认证 Token
    # 注意：渲染服务需要设置环境变量 RENDER_SERVICE_TOKEN 来启用认证
    
    # Cloudflare Browser Rendering 配置（当 backend=cloudflare 时生效）
    # 获取方式：登录 Cloudflare Dashboard -> Account ID 在 URL 中
    #           创建 API Token 需要 Browser Rendering 权限
    # account_id: "your_cloudflare_account_id"
    # api_token: "your_cloudflare_api_token"

  # 静态资源基础 URL
  # HTML 中的 @ 前缀会被替换为此 URL
  # 本地模式（推荐用于本地 Playwright）：
  #   - "file://./static" - 相对路径，会自动转换为 data URI
  #   - "file:///D:/path/to/static" - 绝对路径
  # 远程模式（推荐用于 Cloudflare 渲染）：
  #   - "https://raw.githubusercontent.com/user/repo/branch/static" - GitHub Raw
  #   - "https://your-cdn.com/static" - 自定义 CDN
  static_base_url: "file://./static"



# 队列配置（用于定时发送任务的持久化队列）

# backend 取值：AsyncSQLiteQueue | AsyncQueue | MySQLQueue | RedisQueue

# - AsyncSQLiteQueue：基于 SQLite 的异步持久化队列（默认，推荐单机部署）

# - AsyncQueue：基于文件系统的异步持久化队列（轻量级）

# - MySQLQueue：使用 MySQL 作为后端（支持多实例共享）

# - RedisQueue：使用 Redis 作为后端（高性能，需设置 cache.backend="redis"，推荐分布式部署）

queue:

  backend: AsyncSQLiteQueue  # 可选: AsyncSQLiteQueue | AsyncQueue | MySQLQueue | RedisQueue

  path: data/queues  # 当 backend 为 Async* 时生效，队列数据目录

  mysql: # 当 backend 为 MySQLQueue 时生效

    host: 127.0.0.1

    port: 3306

    user: root

    password: ""

    database: graffito_queue

    table: graffito_tasks
  
  # 注意：RedisQueue 无需额外配置，使用 cache 部分的配置（需设置 backend="redis"）
  # 队列数据存储在 Redis 中，键格式为 <namespace>:queue:<queue_name>



# 接收器配置

receivers:

  qq:

    enabled: true

    auto_accept_friend: true

    friend_request_window: 300

    friend_accept_delay_min: 180  # 好友请求最短延迟（秒）

    friend_accept_delay_max: 240  # 好友请求最大延迟（秒）

    access_token: ""



# 发送器配置  

publishers:

  qzone:

    enabled: true

    max_attempts: 3

    batch_size: 30

    max_images_per_post: 9

    send_schedule: [ ]  # ["09:00", "12:00", "18:00", "21:00"]

    # 发布控制

    publish_text: true            # 是否发布文本（编号/@/评论/链接等）

    include_publish_id: true      # 是否包含发布编号

    include_at_sender: true       # 是否@投稿者

    image_source: both            # 图片来源：rendered|chat|both

    include_segments: false       # 是否包含聊天分段文本（false 不发聊天记录）

  bilibili:

    enabled: false

    max_attempts: 3

    batch_size: 30

    max_images_per_post: 9

    send_schedule: [ ]

    publish_text: true

    include_publish_id: true

    include_at_sender: false

    image_source: rendered

    include_segments: false

    # 可选：直接指定各账号的 cookie 文件位置（如未指定则默认 data/cookies/bilibili_{account_id}.json）

    accounts: { }

  # 小红书（RedNote）发送器配置

  # 使用 Playwright 自动化在创作平台发布图文笔记。

  # 提示：先运行 `python rednote_login_tool.py` 获取并保存登录 Cookies。

  rednote:

    enabled: false               # 是否启用小红书发送器

    max_attempts: 3              # 单条发布失败后的最大重试次数

    batch_size: 20               # 批量发布的批次大小（一次处理的投稿数量）

    max_images_per_post: 9       # 单条笔记最多附带图片数量（红书上限一般为9）

    send_schedule: [ ]            # 定时发送时间（如 ["09:00", "12:00", "18:00", "21:00"]）

    # 发布内容控制（与其它平台保持一致配置语义）

    publish_text: true           # 是否发布文本（编号/@/评论/链接等）。红书主要以图文为主。

    include_publish_id: false    # 是否包含发布编号（一般关闭，避免影响标题/正文）

    include_at_sender: false     # 是否@投稿者（红书不支持通过QQ号@，建议关闭）

    image_source: rendered       # 图片来源：rendered|chat|both（默认使用渲染后的图片）

    include_segments: false      # 是否包含聊天分段文本（不建议在红书正文中附加聊天记录）

    # 账号 Cookies 配置：可为每个账号指定 Cookie 文件；未指定时默认 data/cookies/rednote_{account_id}.json

    accounts: { }

    # 示例：

    # accounts:

    #   myacc:                     # 账号标识（可与 QQ 号一致，方便管理）

    #     cookie_file: data/cookies/rednote_myacc.json

    # Playwright 行为配置

    headless: true               # 是否使用无头模式运行浏览器（服务器环境建议开启）

    slow_mo_ms: 0                # 放慢自动化操作（毫秒）。调试选择较大值如 50-200

    user_agent: ""               # 自定义 UA（留空使用默认 UA）



# 审核配置

audit:

  auto_approve: false

  ai_safety_check: true

  sensitive_words: [ ]

  # 当图片原始大小超过该阈值（MB）时跳过 AI 安全检测与图片描述（0 或不配置表示不跳过）
  skip_image_audit_over_mb: 0


# Chisel 举报审核配置
# 提供举报处理、AI 自动审核、人工复核等完整的内容审核流程
chisel:
  # 是否启用 Chisel 举报审核功能
  enable: true
  
  # 自动删除 AI 评级为 danger（危险）的投稿
  # true: 自动删除并通知举报者和投稿者
  # false: 所有 danger 级别的举报都进入人工审核
  auto_delete: true
  
  # 自动通过 AI 评级为 safe（安全）的举报
  # true: 直接判定为安全，不进入人工审核
  # false: 所有举报都需要人工审核
  auto_pass: true
  
  # 是否抓取平台评论用于 AI 审核
  # true: AI 审核时会参考平台评论内容
  # false: AI 仅基于投稿内容和举报理由进行审核
  fetch_comments: true
  
  # 每个平台最多抓取的评论数量（用于 AI 分析）
  comment_fetch_limit: 50


# 账号组配置

account_groups:

  # 示例组（需要根据实际情况修改）

  default:

    name: "默认组"

    manage_group_id: "123456789"  # 管理群ID

    main_account:

      qq_id: "1234567890"  # 主账号QQ

      http_host: "127.0.0.1"  # NapCat HTTP服务器地址（默认 127.0.0.1，支持远程服务器）

      http_port: 3000  # NapCat HTTP端口（若使用 NapCat/QSign 等，需要仍保留）

      http_token: ""   # Napcat HTTP Token（若启用HTTP鉴权则填写）

    minor_accounts: [ ]  # 副账号列表

    # - qq_id: "9876543210"

    #   http_host: "192.168.1.100"  # 可以配置不同的 NapCat 服务器

    #   http_port: 3001

    #   http_token: ""

    max_post_stack: 1

    watermark_text: ""

    wall_mark: "Graffito"  # 渲染页底部显示的墙标识（如 学校墙/社团墙）

    # 好友添加成功后的欢迎消息
    friend_add_message: |
      🎉 你好，欢迎投稿！
      
      📮 投稿方式：
      直接发送文字 + 图片即可，无需特殊格式
      
      💡 小贴士：
      • 可以分多条发送，系统会在 2 分钟内自动合并
      • AI 会自动审核内容安全性
      • 审核通过后会通知你，并定时发布到各平台
      
      📝 可用指令：
      • #评论 [编号] [内容] - 对已发布投稿追加评论
      • #举报 [编号] [理由] - 举报违规内容
      
      ⏰ 发布时间：每天 9:00、12:00、18:00、21:00
      
      期待你的精彩投稿！✨

    quick_replies:

      "格式": "投稿格式：直接发送文字+图片即可"

      "时间": "我们会在每天9:00、12:00、18:00、21:00发送投稿"

    # 是否允许匿名评论（所有人使用 #评论 指令时，系统不暴露其身份到外部平台；

    # 仅在内部审核日志中可见可选的操作者ID）

    allow_anonymous_comment: true

