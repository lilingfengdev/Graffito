---
description: "处理器数据契约（LLM -> HTML -> Content 渲染）"
---
# 处理器数据契约

本规则定义了在 [`processors/pipeline.py`](mdc:processors/pipeline.py) 中，数据在不同处理器之间流转时所遵循的数据结构和约定。

## 核心数据结构

处理管道的核心是一个名为 `data` 的 Python 字典，它在各个处理阶段之间传递和扩充。

## 1. 管道初始数据

在调用 `LLMProcessor` 之前，`ProcessingPipeline` 会构建一个初始的 `data` 字典，其结构如下：

```python
{
    "submission_id": int,          # 投稿ID
    "sender_id": str,              # 发送者ID
    "nickname": str,               # 发送者昵称
    "messages": list[dict],        # 从 MessageCache 或 raw_content 中获取的原始消息列表
    "is_anonymous": bool,          # 初始匿名状态
    "watermark_text": str,         # 水印文本
    "wall_mark": str               # 墙标文本
}
```

## 2. `LLMProcessor` 阶段

-   **输入**: 初始 `data` 字典。
-   **处理**:
    1.  对消息中的图片进行安全审核和内容描述。
    2.  调用大语言模型（LLM）对消息进行分组、审核和内容提取。
-   **输出 (对 `data` 字典的修改)**:
    -   `data['messages']`: 更新为 LLM 判断属于最后一组投稿的消息列表。
    -   `data['is_anonymous']`: 根据 LLM 判断更新。
    -   `data['llm_result']`: 新增字段，包含 LLM 的详细分析结果。
        ```json
        {
          "needpriv": "true" | "false",
          "safemsg": "true" | "false",
          "isover": "true" | "false",
          "notregular": "true" | "false",
          "messages": [ ... ], // 筛选后的消息ID列表
          "segments": [ "文本片段1", "文本片段2" ] // 提取的文本段落
        }
        ```

-   **副作用**: `Submission` 表中的 `llm_result`, `is_anonymous`, `is_safe`, `is_complete` 字段会被更新。

## 3. `HTMLRenderer` 阶段

-   **输入**: 经过 `LLMProcessor` 处理后的 `data` 字典。
-   **处理**:
    1.  使用 Jinja2 模板将 `data['messages']` 渲染成一个 HTML 字符串。
    2.  在渲染过程中，提取所有可点击的链接。
-   **输出 (对 `data` 字典的修改)**:
    -   `data['rendered_html']`: 新增字段，包含渲染出的完整 HTML 内容。
    -   `data['extracted_links']`: 新增字段，包含从消息中提取的所有 URL 列表。

## 4. `ContentRenderer` 阶段

-   **输入**: 经过 `HTMLRenderer` 处理后的 `data` 字典。
-   **处理**:
    1.  使用 Playwright (无头浏览器) 加载 `data['rendered_html']`。
    2.  将 HTML 页面截图，并根据内容高度可能分页生成多张图片。
-   **输出 (对 `data` 字典的修改)**:
    -   `data['rendered_images']`: 新增字段，包含一个或多个渲染后图片的本地文件路径列表。

## 5. 管道结束

`ContentRenderer` 执行完毕后，`ProcessingPipeline` 会将最终结果写回数据库：

-   更新 `Submission.rendered_images`。
-   更新 `Submission.processed_content` (包含文本、HTML 和链接)。
-   更新 `Submission.processed_at` 时间戳。
-   将 `Submission.status` 设置为 `WAITING`，等待发布。
-   清理该用户对应的 `MessageCache`。

