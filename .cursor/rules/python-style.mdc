---
description: "Python 代码风格与类型约定"
---
# Python 代码风格与类型约定

为保持代码库的一致性和可读性，请遵循以下代码风格约定。

## 1. 代码格式化

- **代码格式化**: 推荐使用 [Black](https://github.com/psf/black) 对代码进行自动格式化，以确保风格统一。
- **导入排序**: 推荐使用 [isort](https://github.com/PyCQA/isort) 对 import 语句进行排序和分组。

建议配置 IDE 在保存时自动运行这些工具。

## 2. 类型提示

- **强制类型提示**: 所有新的函数和方法都应包含类型提示。
- **Pydantic 与 SQLAlchemy**: 在定义数据模型和数据库模型时，充分利用 Pydantic 和 SQLAlchemy 的类型注解功能。这有助于静态分析和运行时数据验证。
- **存疑时请注解**: 如果不确定某个变量的类型，可以使用 `Any`，但应尽可能使用更具体的类型。

## 3. 日志

- **使用 Loguru**: 项目已集成 [`loguru`](https://github.com/Delgan/loguru) 用于日志记录。请使用 `loguru.logger` 而不是标准的 `logging` 模块。
- **日志级别**: 根据信息的重要性选择合适的日志级别（`DEBUG`, `INFO`, `WARNING`, `ERROR`, `CRITICAL`）。敏感信息不应记录在生产日志中。

## 4. 异步代码

- **优先使用 `async/await`**: 对于 I/O 密集型操作，应使用 `async def` 语法。
- **数据库会话**: 异步数据库操作必须遵循 [`async-db`](mdc:.cursor/rules/async-db.mdc) 规则中的会话管理约定。

## 5. 模块与包结构

- **遵循现有结构**: 在添加新功能时，请遵循项目中已有的模块和目录结构。
- **`__init__.py`**: 保持 `__init__.py` 文件简洁，主要用于包的声明和导出公共 API。

