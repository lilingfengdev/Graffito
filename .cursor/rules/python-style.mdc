---
description: "Python 代码风格与类型约定"
globs: "**/*.py"
---

# Python 代码风格与类型约定

## 1. 代码格式化

- **格式化工具**: [Black](https://github.com/psf/black) (行长度 88)
- **导入排序**: [isort](https://github.com/PyCQA/isort)
- **建议**: 在 IDE 中配置保存时自动格式化

## 2. 类型提示 (强制)

### 函数签名

```python
# ✅ 正确
async def process_submission(
    submission_id: int,
    skip_llm: bool = False
) -> dict[str, Any]:
    ...

# ❌ 错误 - 缺少类型提示
async def process_submission(submission_id, skip_llm=False):
    ...
```

### 变量注解

```python
# 复杂类型必须注解
result: dict[str, Any] = {}
items: list[Submission] = []

# 简单类型可省略（类型推断明显时）
count = 0  # 明显是 int
name = "test"  # 明显是 str
```

### 可选类型

```python
from typing import Optional

# Python 3.10+ 推荐写法
def get_user(user_id: int) -> User | None:
    ...

# 旧版本兼容写法
def get_user(user_id: int) -> Optional[User]:
    ...
```

## 3. 日志记录 (Loguru)

```python
from loguru import logger

# ✅ 正确 - 使用 f-string 和结构化信息
logger.info(f"投稿处理完成: submission_id={submission_id}")
logger.error(f"发布失败: {e}", exc_info=True)

# ❌ 错误 - 使用标准 logging
import logging
logging.info("message")  # 禁止！
```

### 日志级别

- `DEBUG`: 详细调试信息（仅开发环境）
- `INFO`: 正常业务流程
- `WARNING`: 异常但不致命
- `ERROR`: 功能执行失败
- `CRITICAL`: 系统级严重错误

## 4. 异步代码

### async/await

```python
# ✅ I/O 操作使用 async
async def fetch_data():
    async with httpx.AsyncClient() as client:
        response = await client.get(url)
    return response.json()

# ❌ CPU 密集型不要用 async（用 ThreadPoolExecutor）
async def calculate_heavy():  # 错误！
    return sum(range(10**8))  # CPU 密集
```

### 并发控制

```python
import asyncio

# 限制并发数
semaphore = asyncio.Semaphore(5)

async def limited_task():
    async with semaphore:
        await do_work()
```

## 5. 异常处理

```python
# ✅ 正确 - 捕获具体异常
try:
    result = await risky_operation()
except ValueError as e:
    logger.error(f"参数错误: {e}")
    raise
except Exception as e:
    logger.critical(f"未知错误: {e}", exc_info=True)
    raise

# ❌ 错误 - 吞掉异常
try:
    await risky_operation()
except:
    pass  # 永远不要这样做！
```

## 6. 命名约定

- **函数/变量**: `snake_case`
- **类**: `PascalCase`
- **常量**: `UPPER_SNAKE_CASE`
- **私有**: `_leading_underscore`

```python
# 常量
MAX_RETRY_COUNT = 3
DEFAULT_TIMEOUT = 30

# 类
class SubmissionProcessor:
    def __init__(self):
        self._private_var = None  # 私有变量
    
    async def process_item(self, item_id: int):  # 公共方法
        ...
    
    def _internal_helper(self):  # 私有方法
        ...
```

## 7. 导入顺序 (isort)

```python
# 1. 标准库
import asyncio
import json
from pathlib import Path

# 2. 第三方库
from fastapi import FastAPI
from loguru import logger
from sqlalchemy import select

# 3. 项目内部
from config import get_settings
from core.database import get_db
from core.models import Submission
```

## 8. 文档字符串

```python
async def complex_function(param1: str, param2: int) -> dict[str, Any]:
    """
    简短描述函数功能。
    
    Args:
        param1: 参数1的说明
        param2: 参数2的说明
    
    Returns:
        返回值说明
    
    Raises:
        ValueError: 什么情况下抛出
    """
    ...
```

简单函数可省略 docstring（功能显而易见时）。

## 9. Pydantic 与 SQLAlchemy

### Pydantic 模型（API 请求/响应）

```python
from pydantic import BaseModel, Field

class LoginRequest(BaseModel):
    username: str = Field(..., min_length=3, max_length=32)
    password: str = Field(..., min_length=6)
```

### SQLAlchemy 模型（数据库）

```python
from sqlalchemy import Column, Integer, String
from core.database import Base

class User(Base):
    __tablename__ = "users"
    
    id = Column(Integer, primary_key=True)
    username = Column(String, unique=True, nullable=False)
```

## 10. 避免的反模式

```python
# ❌ 可变默认参数
def bad_function(items=[]):  # 危险！
    items.append(1)
    return items

# ✅ 正确做法
def good_function(items: list[int] | None = None) -> list[int]:
    if items is None:
        items = []
    items.append(1)
    return items

# ❌ 裸 except
try:
    something()
except:  # 危险！会捕获 KeyboardInterrupt
    pass

# ✅ 至少捕获 Exception
try:
    something()
except Exception as e:
    logger.error(f"错误: {e}")
```

## 相关规则

- 异步数据库: [async-db](mdc:.cursor/rules/async-db.mdc)
- 日志规范: [logging-errors](mdc:.cursor/rules/logging-errors.mdc)
