---
description: "异步数据库访问与会话管理约束"
---
# 异步数据库访问与会话管理约束

本文档规定了在 XWall 项目中访问异步数据库的最佳实践。

## 1. 获取数据库实例

- **单例模式**: 项目使用一个全局的数据库管理器。通过调用 `get_db()` 函数来获取其实例。
  ```python
  from core.database import get_db

  async def my_function():
      db = await get_db()
      # ... use db instance
  ```
- **自动初始化**: `get_db()` 会在首次调用时自动初始化数据库连接和表结构，无需手动操作。

## 2. 会话管理

- **使用 `async with`**: 所有数据库操作都必须在 `db.get_session()` 的异步上下文管理器中执行。这能确保会话被正确地创建、提交、回滚和关闭。
- **严禁手动管理会话**: 不要手动创建 `AsyncSession` 实例，也不要手动调用 `session.commit()`、`session.rollback()` 或 `session.close()`。`get_session()` 上下文管理器会自动处理这一切。

### 正确示例：

```python
from core.database import get_db
from core.models import Submission
from sqlalchemy.future import select

async def get_submission(submission_id: int) -> Submission | None:
    db = await get_db()
    async with db.get_session() as session:
        stmt = select(Submission).where(Submission.id == submission_id)
        result = await session.execute(stmt)
        return result.scalar_one_or_none()
```

### 错误示例：

```python
# 错误：手动创建会话
session = db.async_session()
# ...
await session.commit() # 错误：手动提交
await session.close()  # 错误：手动关闭
```

## 3. CRUD 操作

- **使用 ORM**: 优先使用 SQLAlchemy ORM 进行数据库操作。
- **添加对象**: `session.add(my_object)`
- **查询对象**: `await session.execute(select(...))`
- **删除对象**: `await session.delete(my_object)`

- **事务性**: `get_session()` 的 `async with` 块内的所有操作都在一个事务中。如果块内代码成功执行完毕，事务会自动提交。如果发生异常，事务会自动回滚。

## 4. 注意事项

- **避免循环导入**: 在服务层或业务逻辑代码中，有时直接导入 `core.models` 可能会导致循环导入。如果遇到这种情况，可以在函数内部进行局部导入，如 `core/database.py` 中的 `fetch_submission_by_id` 所示。
- **性能**: 对于复杂的查询，可以使用 `selectinload` 或 `joinedload` 来优化关联对象的加载。

